// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id               String    @id @default(cuid())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  name             String?
  email            String    @unique
  hashedPassword   String?
  role             String    @default("user")
  age              Int
  bio              String    @default("")
  gender           Gender
  preference       Gender
  tracks           Track[]
  // this is bad
  outgoingRequests Request[] @relation("fromUser")
  incomingRequests Request[] @relation("toUser")
  userOneThreads   Thread[]  @relation("userOne")
  userTwoThreads   Thread[]  @relation("userTwo")

  tokens   Token[]
  sessions Session[]
}

model Track {
  id               String   @id @default(cuid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  name             String?
  User             User?    @relation(fields: [userId], references: [id])
  userId           String?
  album            String
  artist           String
  preview          String
  url              String
  cover            String
  acousticness     Float
  danceability     Float
  energy           Float
  instrumentalness Float
  liveness         Float
  speechiness      Float
  valence          Float

  Request   Request? @relation(fields: [requestId], references: [id])
  requestId String?
}

enum Gender {
  MALE
  FEMALE
}

model Session {
  id                 String    @id @default(cuid())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Token {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([hashedToken, type])
}

enum TokenType {
  RESET_PASSWORD
}

model Request {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  from      User     @relation("fromUser", fields: [fromId], references: [id])
  fromId    String
  to        User     @relation("toUser", fields: [toId], references: [id])
  toId      String
  tracks    Track[]

  @@unique([fromId, toId])
}

model Message {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  thread    Thread   @relation(fields: [threadId], references: [id])
  threadId  String
  sender    String
  recipient String
}

model Thread {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userOne   User      @relation("userOne", fields: [userOneId], references: [id])
  userOneId String    @default("")
  userTwo   User      @relation("userTwo", fields: [userTwoId], references: [id])
  userTwoId String    @default("")
  messages  Message[]
}
